/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
    combos {
        compatible = "zmk,combos";

        layer0 {
            bindings = <&to 0>;
            key-positions = <38 39>;
            layers = <1>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <14 13>;
            layers = <0 1>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <1 2>;
            layers = <0 1>;
        };

        enter {
            bindings = <&kp RET>;
            key-positions = <32 33>;
            layers = <0 1>;
        };
    };

    macros {
        undo: undo {
            compatible = "zmk,behavior-macro";
            label = "UNDO";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp Z>,
                <&macro_release>,
                <&kp LCTRL>;
        };
        copy: copy {
            compatible = "zmk,behavior-macro";
            label = "COPY";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp C>,
                <&macro_release>,
                <&kp LCTRL>;
        };
        paste: paste {
            compatible = "zmk,behavior-macro";
            label = "PASTE";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp V>,
                <&macro_release>,
                <&kp LCTRL>;
        };
        next: next {
            compatible = "zmk,behavior-macro";
            label = "NEXT";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp PG_UP>,
                <&macro_release>,
                <&kp LCTRL>;
        };
        prev: prev {
            compatible = "zmk,behavior-macro";
            label = "PREV";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp PG_DN>,
                <&macro_release>,
                <&kp LCTRL>;
        };
    };

    behaviors {
        esc_undo: esc_undo {
            compatible = "zmk,behavior-tap-dance";
            label = "ESC_UNDO";
            #binding-cells = <0>;
            bindings =
                <&kp ESC>,
                <&undo>;
        };
        copy_paste: copy_paste {
            compatible = "zmk,behavior-tap-dance";
            label = "COPY_PASTE";
            #binding-cells = <0>;
            bindings =
                <&copy>,
                <&paste>;
        };
        copy_paste_undo: copy_paste_undo {
            compatible = "zmk,behavior-tap-dance";
            label = "COPY_PASTE_UNDO";
            #binding-cells = <0>;
            bindings =
                <&copy>,
                <&paste>,
                <&undo>;
        };
        hold_tap: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP";
            bindings =
                <&kp>,
                <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
        };
        tap_layer: tap_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_LAYER";
            bindings =
                <&mo>,
                <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
        };
        mo_tog: mo_tog {
            compatible = "zmk,behavior-hold-tap";
            label = "MO_TOG";
            bindings =
                <&mo>,
                <&tog>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "hold-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        alpha {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q  &kp W    &tap_layer 4 F              &kp P                           &kp G       &kp J              &kp L           &kp U           &kp Y  &kp SEMI  &none
&none  &kp A  &kp R    &tap_layer 2 S  &hold_tap LCTRL T                           &kp D       &kp H  &hold_tap RCTRL N  &tap_layer 2 E  &tap_layer 3 I     &kp O  &none
&none  &kp Z  &kp X             &kp C              &kp V                           &kp B       &kp K              &kp M       &kp COMMA         &kp DOT  &kp FSLH  &none
                     &copy_paste_undo          &kp LSHFT  &hold_tap SPACE LA(LC(LSHIFT))    &kp BSPC        &mo_tog 1 1     &key_repeat
            >;

            label = "alpha";
        };

        num {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none      &none      &prev      &kp UP_ARROW      &next      &none        &none  &hold_tap F7 N7  &hold_tap F8 N8  &hold_tap F9 N9  &none  &none
&none  &kp EQUAL   &kp LEFT          &kp DOWN  &kp RIGHT      &none       &kp N0  &hold_tap F4 N4  &hold_tap F5 N5  &hold_tap F6 N6  &none  &none
&none   &kp PLUS  &kp MINUS   &kp KP_MULTIPLY  &kp SLASH      &none        &none  &hold_tap F1 N1  &hold_tap F2 N2  &hold_tap F3 N3  &none  &none
                             &copy_paste_undo   &kp LGUI  &kp LSHFT    &kp RCTRL        &kp COMMA          &kp DOT
            >;

            label = "num";
        };

        sym {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none     &none     &kp AT   &kp HASH       &kp EXCL  &none        &none     &none  &kp LPAR  &kp RPAR  &none  &none
&none  &kp DLLR  &kp PRCNT  &kp CARET       &kp AMPS  &none    &kp GRAVE  &kp BSLH  &kp LBKT  &kp RBKT  &none  &none
&none     &none      &none      &none  &kp LS(MINUS)  &none    &kp TILDE  &kp PIPE  &kp LBRC  &kp RBRC  &none  &none
                                &none          &none  &none        &none     &none     &none
            >;

            label = "sym";
        };

        med {
            bindings = <
&none  &none  &none  &kp LGUI    &none  &none    &none     &none  &kp C_NEXT  &none  &none  &none
&none  &none  &none  &kp LALT  &kp TAB  &none    &none  &kp C_PP  &kp K_PREV  &none  &none  &none
&none  &none  &none     &none    &none  &none    &none     &none       &none  &none  &none  &none
                        &none    &none  &none    &none     &none       &none
            >;
        };

        del {
            bindings = <
&none  &none  &kp BSPC  &none  &kp DEL  &none           &none         &none  &none  &none       &none  &none
&none  &none     &none  &none    &none  &none           &none         &none  &none  &none       &none  &none
&none  &none     &none  &none    &none  &none    &bt BT_SEL 0  &bt BT_SEL 1  &none  &none  &bt BT_CLR  &none
                        &none    &none  &none           &none         &none  &none
            >;
        };
    };
};
